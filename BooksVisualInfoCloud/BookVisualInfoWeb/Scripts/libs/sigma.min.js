  


<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>machack/js/vendor/sigma.min.js at master Â· simonlevasseur/machack</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <link rel="logo" type="image/svg" href="http://github-media-downloads.s3.amazonaws.com/github-logo.svg" />
    <link rel="xhr-socket" href="/_sockets">
    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">

    
    
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="mDHymU5FatzTo6eIFIKP5epBwxHM6yNvNaJsIlaTulE=" name="csrf-token" />

    <link href="https://a248.e.akamai.net/assets.github.com/assets/github-56b9445695845de3e4c1dd542f73a40fba02a571.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://a248.e.akamai.net/assets.github.com/assets/github2-acd1733fec6a20e8368c785414a4dde2ccd5cdf9.css" media="all" rel="stylesheet" type="text/css" />
    


      <script src="https://a248.e.akamai.net/assets.github.com/assets/frameworks-010d500708696b4ecee44478b5229d626367e844.js" type="text/javascript"></script>
      <script src="https://a248.e.akamai.net/assets.github.com/assets/github-bae4ac31b049def91ae4dd91cb45e96b205ab800.js" type="text/javascript"></script>
      
      <meta http-equiv="x-pjax-version" content="24b5a6ba1d301698f90e95aeab004092">

        <link data-pjax-transient rel='permalink' href='/simonlevasseur/machack/blob/b1f6e5c319f68ae1828eb6b50c3b4e576fbeabcd/js/vendor/sigma.min.js'>
    <meta property="og:title" content="machack"/>
    <meta property="og:type" content="githubog:gitrepository"/>
    <meta property="og:url" content="https://github.com/simonlevasseur/machack"/>
    <meta property="og:image" content="https://secure.gravatar.com/avatar/5cdbfc206a88eeea64fbd29ae3de851f?s=420&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"/>
    <meta property="og:site_name" content="GitHub"/>
    <meta property="og:description" content="machack - MacHack repo"/>
    <meta property="twitter:card" content="summary"/>
    <meta property="twitter:site" content="@GitHub">
    <meta property="twitter:title" content="simonlevasseur/machack"/>

    <meta name="description" content="machack - MacHack repo" />

  <link href="https://github.com/simonlevasseur/machack/commits/master.atom" rel="alternate" title="Recent Commits to machack:master" type="application/atom+xml" />

  </head>


  <body class="logged_in page-blob windows vis-public env-production  ">
    <div id="wrapper">

      

      
      
      

      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-blacktocat" href="https://github.com/">
  <span class="mega-icon mega-icon-blacktocat"></span>
</a>

    <div class="divider-vertical"></div>

    
  <a href="/notifications" class="notification-indicator tooltipped downwards" title="You have unread notifications">
    <span class="mail-status unread"></span>
  </a>
  <div class="divider-vertical"></div>


      <div class="command-bar js-command-bar  ">
            <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">
  <a href="/search/advanced" class="advanced-search-icon tooltipped downwards command-bar-search" id="advanced_search" title="Advanced search"><span class="mini-icon mini-icon-advanced-search "></span></a>

  <input type="text" data-hotkey="/ s" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" data-username="Mhighstead" autocapitalize="off">

  <span class="mini-icon help tooltipped downwards" title="Show command bar help">
    <span class="mini-icon mini-icon-help"></span>
  </span>

  <input type="hidden" name="ref" value="cmdform">

    <input type="hidden" class="js-repository-name-with-owner" value="simonlevasseur/machack"/>
    <input type="hidden" class="js-repository-branch" value="master"/>
    <input type="hidden" class="js-repository-tree-sha" value="a8c6c3343d586f0384a672c4b52b91d1f625e327"/>

  <div class="divider-vertical"></div>
</form>
        <ul class="top-nav">
            <li class="explore"><a href="https://github.com/explore">Explore</a></li>
            <li><a href="https://gist.github.com">Gist</a></li>
            <li><a href="/blog">Blog</a></li>
          <li><a href="http://help.github.com">Help</a></li>
        </ul>
      </div>

    

  

    <ul id="user-links">
      <li>
        <a href="https://github.com/Mhighstead" class="name">
          <img height="20" src="https://secure.gravatar.com/avatar/03919bc11c1380b08ba406b4be6c6b91?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="20" /> Mhighstead
        </a>
      </li>

        <li>
          <a href="/new" id="new_repo" class="tooltipped downwards" title="Create a new repo">
            <span class="mini-icon mini-icon-create"></span>
          </a>
        </li>

        <li>
          <a href="/settings/profile" id="account_settings"
            class="tooltipped downwards"
            title="Account settings (You have no verified emails)">
            <span class="mini-icon mini-icon-account-settings"></span>
              <span class="setting_warning">!</span>
          </a>
        </li>
        <li>
          <a class="tooltipped downwards" href="/logout" data-method="post" id="logout" title="Sign out">
            <span class="mini-icon mini-icon-logout"></span>
          </a>
        </li>

    </ul>


<div class="js-new-dropdown-contents hidden">
  <ul class="dropdown-menu">
    <li>
      <a href="/new"><span class="mini-icon mini-icon-create"></span> New repository</a>
    </li>
    <li>
        <a href="https://github.com/simonlevasseur/machack/issues/new"><span class="mini-icon mini-icon-issue-opened"></span> New issue</a>
    </li>
    <li>
    </li>
    <li>
      <a href="/organizations/new"><span class="mini-icon mini-icon-u-list"></span> New organization</a>
    </li>
  </ul>
</div>


    
  </div>
</div>

      

      <div class="global-notice warn"><div class="global-notice-inner"><h2>You don't have any verified emails.  We recommend <a href="https://github.com/settings/emails">verifying</a> at least one email.</h2><p>Email verification will help our support team help you in case you have any email issues or lose your password.</p></div></div>

      


            <div class="site hfeed" itemscope itemtype="http://schema.org/WebPage">
      <div class="hentry">
        
        <div class="pagehead repohead instapaper_ignore readability-menu ">
          <div class="container">
            <div class="title-actions-bar">
              


<ul class="pagehead-actions">


    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="mDHymU5FatzTo6eIFIKP5epBwxHM6yNvNaJsIlaTulE=" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="9422290" />

    <div class="select-menu js-menu-container js-select-menu">
      <span class="minibutton select-menu-button js-menu-target">
        <span class="js-select-button">
          <span class="mini-icon mini-icon-watching"></span>
          Watch
        </span>
      </span>

      <div class="select-menu-modal-holder js-menu-content">
        <div class="select-menu-modal">
          <div class="select-menu-header">
            <span class="select-menu-title">Notification status</span>
            <span class="mini-icon mini-icon-remove-close js-menu-close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container">

            <div class="select-menu-item js-navigation-item js-navigation-target selected">
              <span class="select-menu-item-icon mini-icon mini-icon-confirm"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">You only receive notifications for discussions in which you participate or are @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="mini-icon mini-icon-watching"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item js-navigation-target ">
              <span class="select-menu-item-icon mini-icon mini-icon-confirm"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">You receive notifications for all discussions in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="mini-icon mini-icon-unwatch"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item js-navigation-target ">
              <span class="select-menu-item-icon mini-icon mini-icon-confirm"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">You do not receive any notifications for discussions in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="mini-icon mini-icon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

    <li class="js-toggler-container js-social-container starring-container ">
      <a href="/simonlevasseur/machack/unstar" class="minibutton js-toggler-target star-button starred upwards" title="Unstar this repo" data-remote="true" data-method="post" rel="nofollow">
        <span class="mini-icon mini-icon-remove-star"></span>
        <span class="text">Unstar</span>
      </a>
      <a href="/simonlevasseur/machack/star" class="minibutton js-toggler-target star-button unstarred upwards" title="Star this repo" data-remote="true" data-method="post" rel="nofollow">
        <span class="mini-icon mini-icon-star"></span>
        <span class="text">Star</span>
      </a>
      <a class="social-count js-social-count" href="/simonlevasseur/machack/stargazers">0</a>
    </li>

        <li>
          <a href="/simonlevasseur/machack/fork_select" class="minibutton js-toggler-target fork-button lighter upwards" title="Fork this repo" rel="facebox nofollow">
            <span class="mini-icon mini-icon-branch-create"></span>
            <span class="text">Fork</span>
          </a>
          <a href="/simonlevasseur/machack/network" class="social-count">0</a>
        </li>


</ul>

              <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
                <span class="repo-label"><span>public</span></span>
                <span class="mega-icon mega-icon-public-repo"></span>
                <span class="author vcard">
                  <a href="/simonlevasseur" class="url fn" itemprop="url" rel="author">
                  <span itemprop="title">simonlevasseur</span>
                  </a></span> /
                <strong><a href="/simonlevasseur/machack" class="js-current-repository">machack</a></strong>
              </h1>
            </div>

            
  <ul class="tabs">
    <li><a href="/simonlevasseur/machack" class="selected" highlight="repo_source repo_downloads repo_commits repo_tags repo_branches">Code</a></li>
    <li><a href="/simonlevasseur/machack/network" highlight="repo_network">Network</a></li>
    <li><a href="/simonlevasseur/machack/pulls" highlight="repo_pulls">Pull Requests <span class='counter'>0</span></a></li>

      <li><a href="/simonlevasseur/machack/issues" highlight="repo_issues">Issues <span class='counter'>0</span></a></li>

      <li><a href="/simonlevasseur/machack/wiki" highlight="repo_wiki">Wiki</a></li>


    <li><a href="/simonlevasseur/machack/graphs" highlight="repo_graphs repo_contributors">Graphs</a></li>


  </ul>
  
<div class="tabnav">

  <span class="tabnav-right">
    <ul class="tabnav-tabs">
          <li><a href="/simonlevasseur/machack/tags" class="tabnav-tab" highlight="repo_tags">Tags <span class="counter blank">0</span></a></li>
    </ul>
    
  </span>

  <div class="tabnav-widget scope">


    <div class="select-menu js-menu-container js-select-menu js-branch-menu">
      <a class="minibutton select-menu-button js-menu-target" data-hotkey="w" data-ref="master">
        <span class="mini-icon mini-icon-branch"></span>
        <i>branch:</i>
        <span class="js-select-button">master</span>
      </a>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container">

        <div class="select-menu-modal">
          <div class="select-menu-header">
            <span class="select-menu-title">Switch branches/tags</span>
            <span class="mini-icon mini-icon-remove-close js-menu-close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-filters">
            <div class="select-menu-text-filter">
              <input type="text" id="commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
            </div>
            <div class="select-menu-tabs">
              <ul>
                <li class="select-menu-tab">
                  <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
                </li>
                <li class="select-menu-tab">
                  <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
                </li>
              </ul>
            </div><!-- /.select-menu-tabs -->
          </div><!-- /.select-menu-filters -->

          <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket css-truncate" data-tab-filter="branches">

            <div data-filterable-for="commitish-filter-field" data-filterable-type="substring">

                <div class="select-menu-item js-navigation-item js-navigation-target selected">
                  <span class="select-menu-item-icon mini-icon mini-icon-confirm"></span>
                  <a href="/simonlevasseur/machack/blob/master/js/vendor/sigma.min.js" class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target" data-name="master" rel="nofollow" title="master">master</a>
                </div> <!-- /.select-menu-item -->
            </div>

              <div class="select-menu-no-results">Nothing to show</div>
          </div> <!-- /.select-menu-list -->


          <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket css-truncate" data-tab-filter="tags">
            <div data-filterable-for="commitish-filter-field" data-filterable-type="substring">

            </div>

            <div class="select-menu-no-results">Nothing to show</div>

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

  </div> <!-- /.scope -->

  <ul class="tabnav-tabs">
    <li><a href="/simonlevasseur/machack" class="selected tabnav-tab" highlight="repo_source">Files</a></li>
    <li><a href="/simonlevasseur/machack/commits/master" class="tabnav-tab" highlight="repo_commits">Commits</a></li>
    <li><a href="/simonlevasseur/machack/branches" class="tabnav-tab" highlight="repo_branches" rel="nofollow">Branches <span class="counter ">1</span></a></li>
  </ul>

</div>

  
  
  


            
          </div>
        </div><!-- /.repohead -->

        <div id="js-repo-pjax-container" class="container context-loader-container" data-pjax-container>
          


<!-- blob contrib key: blob_contributors:v21:8a0f8d2e2ca1f6a63d100d5dcce066cd -->
<!-- blob contrib frag key: views10/v8/blob_contributors:v21:8a0f8d2e2ca1f6a63d100d5dcce066cd -->


<div id="slider">
    <div class="frame-meta">

      <p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

        <div class="breadcrumb">
          <span class='bold'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/simonlevasseur/machack" class="js-slide-to" data-branch="master" data-direction="back" itemscope="url"><span itemprop="title">machack</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/simonlevasseur/machack/tree/master/js" class="js-slide-to" data-branch="master" data-direction="back" itemscope="url"><span itemprop="title">js</span></a></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/simonlevasseur/machack/tree/master/js/vendor" class="js-slide-to" data-branch="master" data-direction="back" itemscope="url"><span itemprop="title">vendor</span></a></span><span class="separator"> / </span><strong class="final-path">sigma.min.js</strong> <span class="js-zeroclipboard zeroclipboard-button" data-clipboard-text="js/vendor/sigma.min.js" data-copied-hint="copied!" title="copy to clipboard"><span class="mini-icon mini-icon-clipboard"></span></span>
        </div>

      <a href="/simonlevasseur/machack/find/master" class="js-slide-to" data-hotkey="t" style="display:none">Show File Finder</a>


        <div class="commit commit-loader file-history-tease js-deferred-content" data-url="/simonlevasseur/machack/contributors/master/js/vendor/sigma.min.js">
          Fetching contributorsâ¦

          <div class="participation">
            <p class="loader-loading"><img alt="Octocat-spinner-32-eaf2f5" height="16" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif?1360648843" width="16" /></p>
            <p class="loader-error">Cannot retrieve contributors at this time</p>
          </div>
        </div>

    </div><!-- ./.frame-meta -->

    <div class="frames">
      <div class="frame" data-permalink-url="/simonlevasseur/machack/blob/b1f6e5c319f68ae1828eb6b50c3b4e576fbeabcd/js/vendor/sigma.min.js" data-title="machack/js/vendor/sigma.min.js at master Â· simonlevasseur/machack Â· GitHub" data-type="blob">

        <div id="files" class="bubble">
          <div class="file">
            <div class="meta">
              <div class="info">
                <span class="icon"><b class="mini-icon mini-icon-text-file"></b></span>
                <span class="mode" title="File Mode">file</span>
                  <span>64 lines (63 sloc)</span>
                <span>30.927 kb</span>
              </div>
              <div class="actions">
                <div class="button-group">
                        <a class="minibutton tooltipped leftwards"
                           title="Clicking this button will automatically fork this project so you can edit the file"
                           href="/simonlevasseur/machack/edit/master/js/vendor/sigma.min.js"
                           data-method="post" rel="nofollow">Edit</a>
                  <a href="/simonlevasseur/machack/raw/master/js/vendor/sigma.min.js" class="button minibutton " id="raw-url">Raw</a>
                    <a href="/simonlevasseur/machack/blame/master/js/vendor/sigma.min.js" class="button minibutton ">Blame</a>
                  <a href="/simonlevasseur/machack/commits/master/js/vendor/sigma.min.js" class="button minibutton " rel="nofollow">History</a>
                </div><!-- /.button-group -->
              </div><!-- /.actions -->

            </div>
                <div class="blob-wrapper data type-javascript js-blob-data">
      <table class="file-code file-diff">
        <tr class="file-code-line">
          <td class="blob-line-nums">
            <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
<span id="L17" rel="#L17">17</span>
<span id="L18" rel="#L18">18</span>
<span id="L19" rel="#L19">19</span>
<span id="L20" rel="#L20">20</span>
<span id="L21" rel="#L21">21</span>
<span id="L22" rel="#L22">22</span>
<span id="L23" rel="#L23">23</span>
<span id="L24" rel="#L24">24</span>
<span id="L25" rel="#L25">25</span>
<span id="L26" rel="#L26">26</span>
<span id="L27" rel="#L27">27</span>
<span id="L28" rel="#L28">28</span>
<span id="L29" rel="#L29">29</span>
<span id="L30" rel="#L30">30</span>
<span id="L31" rel="#L31">31</span>
<span id="L32" rel="#L32">32</span>
<span id="L33" rel="#L33">33</span>
<span id="L34" rel="#L34">34</span>
<span id="L35" rel="#L35">35</span>
<span id="L36" rel="#L36">36</span>
<span id="L37" rel="#L37">37</span>
<span id="L38" rel="#L38">38</span>
<span id="L39" rel="#L39">39</span>
<span id="L40" rel="#L40">40</span>
<span id="L41" rel="#L41">41</span>
<span id="L42" rel="#L42">42</span>
<span id="L43" rel="#L43">43</span>
<span id="L44" rel="#L44">44</span>
<span id="L45" rel="#L45">45</span>
<span id="L46" rel="#L46">46</span>
<span id="L47" rel="#L47">47</span>
<span id="L48" rel="#L48">48</span>
<span id="L49" rel="#L49">49</span>
<span id="L50" rel="#L50">50</span>
<span id="L51" rel="#L51">51</span>
<span id="L52" rel="#L52">52</span>
<span id="L53" rel="#L53">53</span>
<span id="L54" rel="#L54">54</span>
<span id="L55" rel="#L55">55</span>
<span id="L56" rel="#L56">56</span>
<span id="L57" rel="#L57">57</span>
<span id="L58" rel="#L58">58</span>
<span id="L59" rel="#L59">59</span>
<span id="L60" rel="#L60">60</span>
<span id="L61" rel="#L61">61</span>
<span id="L62" rel="#L62">62</span>
<span id="L63" rel="#L63">63</span>

          </td>
          <td class="blob-line-code">
                  <div class="highlight"><pre><div class='line' id='LC1'><span class="cm">/* sigmajs.org - an open-source light-weight JavaScript graph drawing library - Version: 0.1 - Author:  Alexis Jacomy - License: MIT */</span></div><div class='line' id='LC2'><span class="kd">var</span> <span class="nx">sigma</span><span class="o">=</span><span class="p">{</span><span class="nx">tools</span><span class="o">:</span><span class="p">{},</span><span class="nx">classes</span><span class="o">:</span><span class="p">{},</span><span class="nx">instances</span><span class="o">:</span><span class="p">{}};</span></div><div class='line' id='LC3'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">some</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">some</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">j</span><span class="p">,</span><span class="k">this</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">});</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">j</span><span class="p">,</span><span class="k">this</span><span class="p">)});</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span></div><div class='line' id='LC4'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">k</span><span class="p">,</span><span class="k">this</span><span class="p">));</span><span class="k">return</span> <span class="nx">j</span><span class="p">});</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="k">this</span><span class="p">){</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">u</span><span class="p">)}</span><span class="k">return</span> <span class="nx">j</span><span class="p">});</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">||</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">,</span><span class="nx">l</span><span class="o">=!</span><span class="p">{</span><span class="nx">toString</span><span class="o">:</span><span class="kc">null</span><span class="p">}.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;toString&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;toString,toLocaleString,valueOf,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,constructor&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">),</span></div><div class='line' id='LC5'><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="nx">k</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&quot;Object.keys called on non-object&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="p">[],</span><span class="nx">s</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span> <span class="k">in</span> <span class="nx">k</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">s</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">s</span><span class="p">]);</span><span class="k">return</span> <span class="nx">u</span><span class="p">}}())})();</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">l</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="p">{};</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="k">in</span> <span class="nx">f</span><span class="p">)</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">}};</span></div><div class='line' id='LC6'><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">{},</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">one</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="o">||!</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">;(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">({</span><span class="nx">h</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">one</span><span class="o">:!</span><span class="mi">0</span><span class="p">})});</span><span class="k">return</span> <span class="nx">l</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">bind</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="o">||!</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">;(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">({</span><span class="nx">h</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">one</span><span class="o">:!</span><span class="mi">1</span><span class="p">})});</span><span class="k">return</span> <span class="nx">l</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">unbind</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">f</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">h</span><span class="o">!=</span></div><div class='line' id='LC7'><span class="nx">j</span><span class="p">}));</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">==</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]})</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">delete</span> <span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]});</span><span class="k">return</span> <span class="nx">l</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">h</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">target</span><span class="o">:</span><span class="nx">l</span><span class="p">})}),</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">f</span><span class="p">.</span><span class="nx">one</span><span class="p">}));</span><span class="k">return</span> <span class="nx">l</span><span class="p">}};</span></div><div class='line' id='LC8'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">v</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;&lt;p&gt;GLOBAL :&lt;/p&gt;&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">globalProbes</span><span class="p">)</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;&lt;p&gt;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; : &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">globalProbes</span><span class="p">[</span><span class="nx">b</span><span class="p">]()</span><span class="o">+</span><span class="s2">&quot;&lt;/p&gt;&quot;</span><span class="p">;</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;&lt;br&gt;&lt;p&gt;LOCAL :&lt;/p&gt;&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">localProbes</span><span class="p">)</span><span class="nx">a</span><span class="o">+=</span><span class="s2">&quot;&lt;p&gt;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; : &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">localProbes</span><span class="p">[</span><span class="nx">b</span><span class="p">]()</span><span class="o">+</span><span class="s2">&quot;&lt;/p&gt;&quot;</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">dom</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">instance</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">monitoring</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">fps</span><span class="o">:</span><span class="mi">40</span><span class="p">,</span><span class="nx">dom</span><span class="o">:</span><span class="nx">v</span><span class="p">,</span><span class="nx">globalProbes</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;Time (ms)&quot;</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getExecutionTime</span><span class="p">,</span><span class="nx">Queue</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getQueuedTasksCount</span><span class="p">,</span><span class="nx">Tasks</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getTasksCount</span><span class="p">,</span></div><div class='line' id='LC9'><span class="nx">FPS</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getFPS</span><span class="p">},</span><span class="nx">localProbes</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;Nodes count&quot;</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">},</span><span class="s2">&quot;Edges count&quot;</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">length</span><span class="p">}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">activate</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="p">.</span><span class="nx">monitoring</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">monitoring</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">setInterval</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="mi">1</span><span class="nx">E3</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">fps</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">desactivate</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="p">.</span><span class="nx">monitoring</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">monitoring</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">monitoring</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">dom</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">mouseEnabled</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseY</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">*</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">wheelDelta</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">wheelDelta</span><span class="o">||</span></div><div class='line' id='LC10'><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">detail</span><span class="o">&amp;&amp;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">zoomMultiply</span><span class="o">:</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">zoomMultiply</span><span class="p">)),</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">blockScroll</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">preventDefault</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">returnValue</span><span class="o">=!</span><span class="mi">1</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">interpolationID</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">m</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minRatio</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxRatio</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">directZooming</span><span class="o">?</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">k</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">zoomDelta</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">dragDelta</span><span class="p">)</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">!=</span><span class="nx">g</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">!=</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">!=</span><span class="nx">t</span><span class="p">))</span><span class="nx">c</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">interpolationID</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">setInterval</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;startinterpolate&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="nx">j</span><span class="o">+=</span></div><div class='line' id='LC11'><span class="nx">k</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">zoomDelta</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">dragDelta</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="p">.</span><span class="nx">quadratic</span><span class="p">.</span><span class="nx">easeout</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">-</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="nx">t</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">-</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">/</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="nx">n</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="nx">C</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;interpolate&quot;</span><span class="p">);</span><span class="mi">1</span><span class="o">&lt;=</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">interpolationID</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="p">,</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">-</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="nx">t</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">-</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">ratio</span><span class="o">/</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="nx">t</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;stopinterpolate&quot;</span><span class="p">))}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span></div><div class='line' id='LC12'><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">minRatio</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">maxRatio</span><span class="o">:</span><span class="mi">32</span><span class="p">,</span><span class="nx">marginRatio</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">zoomDelta</span><span class="o">:</span><span class="mf">0.1</span><span class="p">,</span><span class="nx">dragDelta</span><span class="o">:</span><span class="mf">0.3</span><span class="p">,</span><span class="nx">zoomMultiply</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">directZooming</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">blockScroll</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">inertia</span><span class="o">:</span><span class="mf">1.1</span><span class="p">,</span><span class="nx">mouseEnabled</span><span class="o">:!</span><span class="mi">0</span><span class="p">};</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">ratio</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMMouseScroll&quot;</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousewheel&quot;</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">offsetX</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">offsetX</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">layerX</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">layerX</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">clientX</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC13'><span class="nx">c</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">offsetY</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">offsetY</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">layerY</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">layerY</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">clientY</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">clientY</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">-</span><span class="nx">o</span><span class="o">+</span><span class="nx">n</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">-</span><span class="nx">d</span><span class="o">+</span><span class="nx">C</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">||</span><span class="nx">g</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;drag&quot;</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;move&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">preventDefault</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">returnValue</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">mouseEnabled</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseX</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mouseY</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;startdrag&quot;</span><span class="p">),</span></div><div class='line' id='LC14'><span class="nx">c</span><span class="p">.</span><span class="nx">preventDefault</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">returnValue</span><span class="o">=!</span><span class="mi">1</span><span class="p">)},</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">mouseEnabled</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">),(</span><span class="nx">n</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">||</span><span class="nx">C</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">inertia</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageX</span><span class="o">-</span><span class="nx">p</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">inertia</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stageY</span><span class="o">-</span><span class="nx">i</span><span class="p">)),</span><span class="nx">d</span><span class="p">.</span><span class="nx">preventDefault</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">returnValue</span><span class="o">=!</span><span class="mi">1</span><span class="p">)},</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">checkBorders</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">v</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">removeTask</span><span class="p">(</span><span class="s2">&quot;node_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">removeTask</span><span class="p">(</span><span class="s2">&quot;edge_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">removeTask</span><span class="p">(</span><span class="s2">&quot;label_&quot;</span><span class="o">+</span></div><div class='line' id='LC15'><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">stopTasks</span><span class="p">();</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="s2">&quot;absolute&quot;</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">,</span><span class="s2">&quot;sigma_&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;sigma_&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">domRoot</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawHoverNodes</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">checkHover</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">mouseX</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">mouseY</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">hover</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC16'><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">active</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">drawHoverNode</span><span class="p">(</span><span class="nx">a</span><span class="p">)}));</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawActiveNodes</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">active</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">drawActiveNode</span><span class="p">(</span><span class="nx">a</span><span class="p">)});</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">auto</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">drawNodes</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">drawEdges</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">drawLabels</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">lastNodes</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">lastEdges</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">lastLabels</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">drawHoverNodes</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">drawActiveNodes</span><span class="o">:!</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">domRoot</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domRoot</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domRoot</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">graph</span><span class="o">=</span></div><div class='line' id='LC17'><span class="k">new</span> <span class="nx">u</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;edges&quot;</span><span class="p">,</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;nodes&quot;</span><span class="p">,</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;labels&quot;</span><span class="p">,</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;hover&quot;</span><span class="p">,</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;monitor&quot;</span><span class="p">,</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;mouse&quot;</span><span class="p">,</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">plotter</span><span class="o">=</span><span class="k">new</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">labels</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">graph</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">monitor</span><span class="o">=</span><span class="k">new</span> <span class="nx">l</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">monitor</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="o">=</span><span class="k">new</span> <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">mouse</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;drag interpolate&quot;</span><span class="p">,</span></div><div class='line' id='LC18'><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawNodes</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawEdges</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawLabels</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;stopdrag stopinterpolate&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawNodes</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawEdges</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawLabels</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;mousedown mouseup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">hover</span><span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">});</span><span class="nx">d</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="s2">&quot;downgraph&quot;</span><span class="o">:</span><span class="s2">&quot;upgraph&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="s2">&quot;downnodes&quot;</span><span class="o">:</span><span class="s2">&quot;upnodes&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;move&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC19'><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">a</span><span class="p">();</span><span class="nx">o</span><span class="p">()});</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;startgenerators&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getGeneratorsIDs</span><span class="p">().</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;_ext_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s2">&quot;$&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">))})</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawNodes</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawEdges</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">auto</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawLabels</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;stopgenerators&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">draw</span><span class="p">()});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">[</span><span class="nx">n</span><span class="p">](</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">getGeneratorsIDs</span><span class="p">().</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;_ext_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s2">&quot;$&quot;</span><span class="p">,</span></div><div class='line' id='LC20'><span class="s2">&quot;&quot;</span><span class="p">))}))</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawNodes</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawEdges</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">drawLabels</span><span class="o">:</span><span class="nx">b</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="p">{</span><span class="nx">nodes</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">edges</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">labels</span><span class="o">:</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastNodes</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastEdges</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastLabels</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">rescale</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">).</span><span class="nx">setBorders</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">checkBorders</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">borders</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageY</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;graphscaled&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">)</span><span class="s2">&quot;canvas&quot;</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span></div><div class='line' id='LC21'><span class="nx">o</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">o</span><span class="p">[</span><span class="nx">m</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">height</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">o</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawNode</span><span class="p">(););</span><span class="k">else</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">addTask</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawNode</span><span class="p">,</span><span class="s2">&quot;node_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">o</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;node_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawLabel</span><span class="p">(););</span><span class="k">else</span> <span class="nx">m</span><span class="o">?</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">queueTask</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawLabel</span><span class="p">,</span><span class="s2">&quot;label_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">addTask</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawLabel</span><span class="p">,</span></div><div class='line' id='LC22'><span class="s2">&quot;label_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">o</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;label_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(;</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawEdge</span><span class="p">(););</span><span class="k">else</span> <span class="nx">m</span><span class="o">?</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">queueTask</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawEdge</span><span class="p">,</span><span class="s2">&quot;edge_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">addTask</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">task_drawEdge</span><span class="p">,</span><span class="s2">&quot;edge_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">o</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;edge_&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;draw&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">refresh</span><span class="p">();</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">runTasks</span><span class="p">();</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">resize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">domRoot</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">domRoot</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">||</span><span class="nx">o</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span></div><div class='line' id='LC23'><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">resize</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastNodes</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastEdges</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">lastLabels</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">refresh</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">domElements</span><span class="p">.</span><span class="nx">hover</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">a</span><span class="p">();</span><span class="nx">o</span><span class="p">();</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">drawHover</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">drawActive</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">clearSchedule</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;resize&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">resize</span><span class="p">()})}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_core</span><span class="o">=</span></div><div class='line' id='LC24'><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">kill</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">getID</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">configProperties</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">drawingProperties</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">plotter</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">plotter</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseProperties</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">graphProperties</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getMouse</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">{</span><span class="nx">mouseX</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">mouseX</span><span class="p">,</span><span class="nx">mouseY</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">mouseY</span><span class="p">,</span><span class="nx">down</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">isMouseDown</span><span class="p">}};</span></div><div class='line' id='LC25'><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="p">{</span><span class="nx">stageX</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">stageY</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageY</span><span class="p">,</span><span class="nx">ratio</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageX</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageX</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageY</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageY</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="p">;</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">goTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">zoomTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="s2">&quot;minRatio&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="s2">&quot;maxRatio&quot;</span><span class="p">));</span><span class="nx">a</span><span class="o">==</span></div><div class='line' id='LC26'><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageX</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">stageY</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">((</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="p">),(</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">mousecaptor</span><span class="p">.</span><span class="nx">ratio</span><span class="p">),</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">resize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">resize</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">refresh</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">refresh</span><span class="p">();</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">addGenerator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">addGenerator</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="s2">&quot;_ext_&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span></div><div class='line' id='LC27'><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">removeGenerator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="p">.</span><span class="nx">removeGenerator</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="s2">&quot;_ext_&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">addEdge</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">dropNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">dropNode</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">dropEdge</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">dropEdge</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">pushGraph</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">nodes</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="o">||!</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span><span class="nx">h</span><span class="p">.</span><span class="nx">edges</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){(</span><span class="nx">validID</span><span class="o">=</span></div><div class='line' id='LC28'><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="o">||!</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">emptyGraph</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getNodesCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getEdgesCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">length</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">iterNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">iterNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">iterEdges</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">iterEdges</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">getNodes</span><span class="p">(</span><span class="nx">h</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getEdges</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">getEdges</span><span class="p">(</span><span class="nx">h</span><span class="p">)};</span></div><div class='line' id='LC29'><span class="k">this</span><span class="p">.</span><span class="nx">activateMonitoring</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">monitor</span><span class="p">.</span><span class="nx">activate</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">desactivateMonitoring</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">monitor</span><span class="p">.</span><span class="nx">desactivate</span><span class="p">()};</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;downnodes upnodes downgraph upgraph&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="p">)});</span><span class="nx">b</span><span class="p">.</span><span class="nx">graph</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;overnodes outnodes&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="p">)})}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">degree</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">degree</span><span class="p">,</span><span class="nx">inDegree</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">inDegree</span><span class="p">,</span><span class="nx">outDegree</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">outDegree</span><span class="p">,</span><span class="nx">displayX</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="p">,</span><span class="nx">displayY</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="p">,</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">,</span><span class="nx">label</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span><span class="nx">id</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span></div><div class='line' id='LC30'><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">fixed</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">fixed</span><span class="p">,</span><span class="nx">active</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">active</span><span class="p">,</span><span class="nx">hidden</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">hidden</span><span class="p">,</span><span class="nx">forceLabel</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">forceLabel</span><span class="p">,</span><span class="nx">attr</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">source</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">target</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">type</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">weight</span><span class="p">,</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">,</span><span class="nx">label</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span><span class="nx">hidden</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">hidden</span><span class="p">,</span><span class="nx">id</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">attr</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">,</span><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="o">=</span><span class="p">{};</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">minNodeSize</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">maxNodeSize</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">minEdgeSize</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">maxEdgeSize</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC31'><span class="nx">scalingMode</span><span class="o">:</span><span class="s2">&quot;inside&quot;</span><span class="p">,</span><span class="nx">nodesPowRatio</span><span class="o">:</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">edgesPowRatio</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">borders</span><span class="o">=</span><span class="p">{};</span><span class="nx">h</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Node &quot;&#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s1">&#39;&quot; already exists.&#39;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{},</span><span class="nx">d</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">degree</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">inDegree</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">outDegree</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">fixed</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">active</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">hidden</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">forceLabel</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">label</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">id</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">attr</span><span class="o">:</span><span class="p">{}},</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;x&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;y&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;size&quot;</span><span class="o">:</span><span class="nx">d</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=+</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;fixed&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;active&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;hidden&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;forceLabel&quot;</span><span class="o">:</span><span class="nx">d</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=!!</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;label&quot;</span><span class="o">:</span><span class="nx">d</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC32'><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">attr</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">]}</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">addEdge</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Edge &quot;&#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s1">&#39;&quot; already exists.&#39;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Edge&#39;s source \&quot;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;&quot; does not exist yet.&#39;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Edge&#39;s target \&quot;&quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s1">&#39;&quot; does not exist yet.&#39;</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="p">{};</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">source</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">target</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">size</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">displaySize</span><span class="o">:</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">label</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">id</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">hidden</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">attr</span><span class="o">:</span><span class="p">{}};</span><span class="nx">b</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">degree</span><span class="o">++</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">outDegree</span><span class="o">++</span><span class="p">;</span></div><div class='line' id='LC33'><span class="nx">b</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">degree</span><span class="o">++</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">inDegree</span><span class="o">++</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">n</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;source&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;target&quot;</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;hidden&quot;</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=!!</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;size&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;weight&quot;</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=+</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">toString</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">toString</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;label&quot;</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">attr</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">f</span><span class="p">]}</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">dropNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{};((</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">||</span><span class="p">[]).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="o">:</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Node &quot;&#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span></div><div class='line' id='LC34'><span class="s1">&#39;&quot; does not exist.&#39;</span><span class="p">)});</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span> <span class="k">in</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">degree</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">])});</span><span class="nx">d</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">)});</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">id</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="k">delete</span> <span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">degree</span><span class="o">--</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">inDegree</span><span class="o">--</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="k">in</span> <span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">delete</span> <span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">degree</span><span class="o">--</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">outDegree</span><span class="o">--</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">dropEdge</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){((</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">||</span><span class="p">[]).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">]){</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">source</span><span class="p">.</span><span class="nx">degree</span><span class="o">--</span><span class="p">;</span></div><div class='line' id='LC35'><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">source</span><span class="p">.</span><span class="nx">outDegree</span><span class="o">--</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">target</span><span class="p">.</span><span class="nx">degree</span><span class="o">--</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">target</span><span class="p">.</span><span class="nx">inDegree</span><span class="o">--</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="kc">null</span><span class="o">!=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">delete</span> <span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">]}</span><span class="k">else</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Edge &quot;&#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s1">&#39;&quot; does not exist.&#39;</span><span class="p">)});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">iterEdges</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">]})</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;displaySize&quot;</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;weight&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;size&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC36'><span class="o">+</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;source&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;target&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;hidden&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=!!</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;label&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]}});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">iterNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">]})</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;attr&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;degree&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;inDegree&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;outDegree&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;displayX&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;displayY&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;displaySize&quot;</span><span class="o">:</span><span class="k">break</span><span class="p">;</span></div><div class='line' id='LC37'><span class="k">case</span> <span class="s2">&quot;x&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;y&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;size&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=+</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;fixed&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;active&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;hidden&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;forceLabel&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=!!</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;label&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]}});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getEdges</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">((</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">||</span><span class="p">[]).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">edgesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">])});</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span><span class="k">this</span><span class="p">.</span><span class="nx">getNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">((</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">||</span><span class="p">[]).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodesIndex</span><span class="p">[</span><span class="nx">a</span><span class="p">])});</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span></div><div class='line' id='LC38'><span class="k">this</span><span class="p">.</span><span class="nx">empty</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rescale</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">g</span><span class="p">)});</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">h</span><span class="p">)});</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">i</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">p</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">m</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">)});</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="s2">&quot;outside&quot;</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">scalingMode</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">p</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">p</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="nx">v</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxNodeSize</span><span class="o">||</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">D</span><span class="p">;</span><span class="nx">j</span><span class="o">+=</span><span class="nx">v</span><span class="p">;</span><span class="nx">i</span><span class="o">-=</span><span class="nx">v</span><span class="p">;</span><span class="nx">p</span><span class="o">+=</span><span class="nx">v</span><span class="p">;</span><span class="nx">m</span><span class="o">-=</span><span class="nx">v</span><span class="p">;</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="s2">&quot;outside&quot;</span><span class="o">==</span></div><div class='line' id='LC39'><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">scalingMode</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">p</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">p</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxNodeSize</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minNodeSize</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxNodeSize</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minNodeSize</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxNodeSize</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxNodeSize</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minNodeSize</span><span class="p">)</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minNodeSize</span><span class="p">);</span><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">;</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxEdgeSize</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minEdgeSize</span><span class="o">?</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxEdgeSize</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minEdgeSize</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">maxEdgeSize</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minEdgeSize</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">minEdgeSize</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">size</span><span class="o">*</span><span class="nx">k</span><span class="o">+</span><span class="nx">l</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fixed</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayX</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span></div><div class='line' id='LC40'><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayY</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="p">(</span><span class="nx">p</span><span class="o">+</span><span class="nx">m</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">)});</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="o">*</span><span class="nx">x</span><span class="o">+</span><span class="nx">B</span><span class="p">});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">translate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodesPowRatio</span><span class="p">);</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">fixed</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayX</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayX</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayY</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayY</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">*=</span><span class="nx">g</span><span class="p">});</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">edgesPowRatio</span><span class="p">);</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">*=</span><span class="nx">g</span><span class="p">});</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setBorders</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minX</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minX</span><span class="o">?</span></div><div class='line' id='LC41'><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxX</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxX</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minY</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minY</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">minY</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxY</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxY</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">borders</span><span class="p">.</span><span class="nx">maxY</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">)})};</span><span class="k">this</span><span class="p">.</span><span class="nx">checkHover</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">hidden</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">hover</span><span class="o">=</span></div><div class='line' id='LC42'><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">hover</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">m</span><span class="o">&amp;&amp;!</span><span class="nx">p</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">hover</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span><span class="o">:</span><span class="nx">p</span><span class="o">&amp;&amp;!</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">hover</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="p">))}});</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;overnodes&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;outnodes&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;fixed&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSize</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelSize</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSizeRatio</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">hoverFontStyle</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">fontStyle</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot;px &quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">hoverFont</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">font</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span></div><div class='line' id='LC43'><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelHoverBGColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultHoverLabelBGColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelHoverShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetX</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetY</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowBlur</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowColor</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelHoverShadowColor</span><span class="p">);</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">drawRoundRect</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">).</span><span class="nx">width</span><span class="o">+</span><span class="mf">1.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">+</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">4</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">4</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span><span class="s2">&quot;left&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetY</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowBlur</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span></div><div class='line' id='LC44'><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodeBorderColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeBorderColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">borderSize</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodeHoverColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeHoverColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelHoverColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelHoverColor</span><span class="p">;</span></div><div class='line' id='LC45'><span class="nx">b</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="mf">1.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">+</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">));</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">||</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;A node&#39;s coordinate is not a number (id: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">hidden</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">&gt;-</span><span class="nx">k</span><span class="o">/</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">*</span><span class="nx">k</span><span class="o">/</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">&gt;-</span><span class="nx">l</span><span class="o">/</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">*</span><span class="nx">l</span><span class="o">/</span><span class="mi">3</span><span class="p">}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">Cascade</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">labelColor</span><span class="o">:</span><span class="s2">&quot;default&quot;</span><span class="p">,</span><span class="nx">defaultLabelColor</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="nx">labelHoverBGColor</span><span class="o">:</span><span class="s2">&quot;default&quot;</span><span class="p">,</span><span class="nx">defaultHoverLabelBGColor</span><span class="o">:</span><span class="s2">&quot;#fff&quot;</span><span class="p">,</span></div><div class='line' id='LC46'><span class="nx">labelHoverShadow</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">labelHoverShadowColor</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="nx">labelHoverColor</span><span class="o">:</span><span class="s2">&quot;default&quot;</span><span class="p">,</span><span class="nx">defaultLabelHoverColor</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="nx">labelActiveBGColor</span><span class="o">:</span><span class="s2">&quot;default&quot;</span><span class="p">,</span><span class="nx">defaultActiveLabelBGColor</span><span class="o">:</span><span class="s2">&quot;#fff&quot;</span><span class="p">,</span><span class="nx">labelActiveShadow</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">labelActiveShadowColor</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="nx">labelActiveColor</span><span class="o">:</span><span class="s2">&quot;default&quot;</span><span class="p">,</span><span class="nx">defaultLabelActiveColor</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="nx">labelSize</span><span class="o">:</span><span class="s2">&quot;fixed&quot;</span><span class="p">,</span><span class="nx">defaultLabelSize</span><span class="o">:</span><span class="mi">12</span><span class="p">,</span><span class="nx">labelSizeRatio</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">labelThreshold</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">font</span><span class="o">:</span><span class="s2">&quot;Arial&quot;</span><span class="p">,</span><span class="nx">hoverFont</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">activeFont</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">fontStyle</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">hoverFontStyle</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">activeFontStyle</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">edgeColor</span><span class="o">:</span><span class="s2">&quot;source&quot;</span><span class="p">,</span><span class="nx">defaultEdgeColor</span><span class="o">:</span><span class="s2">&quot;#aaa&quot;</span><span class="p">,</span><span class="nx">defaultEdgeType</span><span class="o">:</span><span class="s2">&quot;line&quot;</span><span class="p">,</span></div><div class='line' id='LC47'><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="s2">&quot;#aaa&quot;</span><span class="p">,</span><span class="nx">nodeHoverColor</span><span class="o">:</span><span class="s2">&quot;node&quot;</span><span class="p">,</span><span class="nx">defaultNodeHoverColor</span><span class="o">:</span><span class="s2">&quot;#fff&quot;</span><span class="p">,</span><span class="nx">nodeActiveColor</span><span class="o">:</span><span class="s2">&quot;node&quot;</span><span class="p">,</span><span class="nx">defaultNodeActiveColor</span><span class="o">:</span><span class="s2">&quot;#fff&quot;</span><span class="p">,</span><span class="nx">borderSize</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">nodeBorderColor</span><span class="o">:</span><span class="s2">&quot;node&quot;</span><span class="p">,</span><span class="nx">defaultNodeBorderColor</span><span class="o">:</span><span class="s2">&quot;#fff&quot;</span><span class="p">,</span><span class="nx">edgesSpeed</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span><span class="nx">nodesSpeed</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span><span class="nx">labelsSpeed</span><span class="o">:</span><span class="mi">200</span><span class="p">};</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">task_drawLabel</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">++&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelsSpeed</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">isOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="p">])){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">++</span><span class="p">],</span></div><div class='line' id='LC48'><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">&gt;=</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelThreshold</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">forceLabel</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="s2">&quot;fixed&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSize</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelSize</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSizeRatio</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">font</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">fontStyle</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&quot;px &quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">font</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelColor</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelColor</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="mf">1.5</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">displayY</span><span class="o">+</span><span class="nx">i</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">))}}</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">currentLabelIndex</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">task_drawEdge</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">++&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">edgesSpeed</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">&lt;</span></div><div class='line' id='LC49'><span class="nx">b</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">hidden</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">hidden</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">hidden</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">isOnScreen</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">g</span><span class="p">.</span><span class="nx">isOnScreen</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">++</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">++</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">displayX</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">displayY</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">displayX</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">displayY</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">edgeColor</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;source&quot;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;target&quot;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultEdgeColor</span><span class="p">}</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultEdgeType</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;curve&quot;</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span></div><div class='line' id='LC50'><span class="nx">o</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">lineWidth</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">quadraticCurveTo</span><span class="p">((</span><span class="nx">d</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">,(</span><span class="nx">i</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">j</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">lineWidth</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()}}</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">currentEdgeIndex</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">task_drawNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">++&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodesSpeed</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">isOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="p">])){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">++</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="nx">f</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span></div><div class='line' id='LC51'><span class="nx">i</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">displayX</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">displayY</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">hover</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">currentNodeIndex</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">drawActiveNode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="s2">&quot;fixed&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSize</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelSize</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelSizeRatio</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">activeFontStyle</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">fontStyle</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot;px &quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">activeFont</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">font</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelHoverBGColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultActiveLabelBGColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelActiveShadow</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC52'><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetX</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetY</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowBlur</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowColor</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelActiveShadowColor</span><span class="p">);</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">drawRoundRect</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">-</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">-</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">).</span><span class="nx">width</span><span class="o">+</span><span class="mf">1.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">+</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">4</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">4</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span><span class="s2">&quot;left&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowOffsetY</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowBlur</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodeBorderColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeBorderColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="p">),</span></div><div class='line' id='LC53'><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">borderSize</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">nodeActiveColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeActiveColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;node&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">labelActiveColor</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultNodeColor</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nx">defaultLabelActiveColor</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayX</span><span class="o">+</span><span class="mf">1.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">displaySize</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">displayY</span><span class="o">+</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">));</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span></div><div class='line' id='LC54'><span class="k">this</span><span class="p">.</span><span class="nx">drawHoverNode</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isOnScreen</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">resize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">j</span><span class="p">(</span><span class="nx">b</span><span class="p">,(</span><span class="o">++</span><span class="nx">z</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">instances</span><span class="p">[</span><span class="nx">z</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">instances</span><span class="p">[</span><span class="nx">z</span><span class="p">]};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">drawRoundRect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">j</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;topleft&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;top&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">)),</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;topright&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;top&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">)),</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;bottomleft&quot;</span><span class="p">)</span><span class="o">||</span></div><div class='line' id='LC55'><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">)),</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;bottomright&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">);</span><span class="nx">d</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">arcTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">arcTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">j</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="o">-</span><span class="nx">i</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">arcTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">arcTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">getRGB</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="p">{</span><span class="nx">r</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="s2">&quot;#&quot;</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span></div><div class='line' id='LC56'><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">6</span><span class="o">==</span><span class="nx">c</span><span class="o">?</span><span class="nx">h</span><span class="o">=</span><span class="p">{</span><span class="nx">r</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="mi">16</span><span class="p">),</span><span class="nx">g</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="mi">16</span><span class="p">),</span><span class="nx">b</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="mi">16</span><span class="p">)}</span><span class="o">:</span><span class="mi">3</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="p">{</span><span class="nx">r</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="mi">16</span><span class="p">),</span><span class="nx">g</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="mi">16</span><span class="p">),</span><span class="nx">b</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span><span class="mi">16</span><span class="p">)})}</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="nx">h</span><span class="p">};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">rgbToHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">return</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">toHex</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">toHex</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">+</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">toHex</span><span class="p">(</span><span class="nx">h</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">tools</span><span class="p">.</span><span class="nx">toHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">return</span><span class="s2">&quot;00&quot;</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">255</span><span class="p">));</span></div><div class='line' id='LC57'><span class="k">return</span><span class="s2">&quot;0123456789ABCDEF&quot;</span><span class="p">.</span><span class="nx">charAt</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="nx">b</span><span class="o">%</span><span class="mi">16</span><span class="p">)</span><span class="o">/</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;0123456789ABCDEF&quot;</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">b</span><span class="o">%</span><span class="mi">16</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">addPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">chronos</span><span class="o">=</span><span class="k">new</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;frameinserted&quot;</span><span class="p">);</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">(););</span><span class="o">!</span><span class="nx">l</span><span class="o">||!</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="p">()</span><span class="o">:</span><span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">(),</span><span class="nx">p</span><span class="o">++</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">z</span><span class="o">-</span><span class="nx">s</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">s</span><span class="o">-</span><span class="nx">B</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;insertframe&quot;</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="nx">A</span><span class="o">%=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">].</span><span class="nx">task</span><span class="p">()){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">].</span><span class="nx">taskName</span><span class="p">;</span><span class="nx">w</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">taskParent</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">taskName</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">taskName</span><span class="p">,</span><span class="nx">task</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">task</span><span class="p">});</span></div><div class='line' id='LC58'><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">taskParent</span><span class="o">!=</span><span class="nx">a</span><span class="p">});</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;killed&quot;</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">A</span><span class="o">--</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">])}</span><span class="nx">A</span><span class="o">++</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()</span><span class="o">-</span><span class="nx">x</span><span class="p">;</span><span class="k">return</span> <span class="nx">z</span><span class="o">&lt;=</span><span class="nx">u</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="nx">l</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;start&quot;</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;insertframe&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;stop&quot;</span><span class="p">);</span><span class="nx">l</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Task &quot;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;&quot; is not a function&#39;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">taskName</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">task</span><span class="o">:</span><span class="nx">a</span><span class="p">});</span><span class="nx">l</span><span class="o">=!</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">()</span><span class="o">||</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">q</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!!</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">on</span><span class="p">}).</span><span class="nx">length</span><span class="o">:</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">q</span><span class="p">).</span><span class="nx">length</span><span class="p">}</span></div><div class='line' id='LC59'><span class="kd">function</span> <span class="nx">j</span><span class="p">(){</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">q</span><span class="p">).</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;startgenerators&quot;</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;killed&quot;</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span> <span class="k">in</span> <span class="nx">q</span><span class="p">)</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">on</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">task</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}),</span><span class="nx">g</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;killed&quot;</span><span class="p">,</span><span class="nx">k</span><span class="p">).</span><span class="nx">runTasks</span><span class="p">())</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s2">&quot;stopgenerators&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">taskName</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">taskName</span><span class="p">].</span><span class="nx">del</span><span class="o">||!</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">taskName</span><span class="p">].</span><span class="nx">condition</span><span class="p">()</span><span class="o">?</span><span class="k">delete</span> <span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">taskName</span><span class="p">]</span><span class="o">:</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">taskName</span><span class="p">].</span><span class="nx">on</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">())}</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">classes</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">l</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="o">/</span><span class="nx">t</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="p">{},</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span></div><div class='line' id='LC60'><span class="nx">w</span><span class="o">=</span><span class="p">[],</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">frequency</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="mi">1</span><span class="o">*</span><span class="nx">a</span><span class="p">),</span><span class="nx">s</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="o">/</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">runTasks</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">stopTasks</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">insertFrame</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addTask</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">queueTask</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Task &quot;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;&quot; is not a function&#39;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">taskName</span><span class="o">==</span><span class="nx">c</span><span class="p">}))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Parent task &quot;&#39;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s1">&#39;&quot; of &quot;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;&quot; is not attached.&#39;</span><span class="p">);</span><span class="nx">w</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">taskParent</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">taskName</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">task</span><span class="o">:</span><span class="nx">a</span><span class="p">});</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">removeTask</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span><span class="mi">1</span><span class="o">==</span><span class="nx">c</span><span class="o">?</span><span class="nx">w</span><span class="o">=</span><span class="p">[]</span><span class="o">:</span><span class="mi">2</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">w</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="p">[]),</span></div><div class='line' id='LC61'><span class="nx">a</span><span class="p">();</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">taskName</span><span class="o">==</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">task</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">taskName</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="mi">1</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">taskParent</span><span class="o">==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">taskParent</span><span class="o">!=</span><span class="nx">d</span><span class="p">}))}</span><span class="nx">l</span><span class="o">=!</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">()</span><span class="o">||</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">addGenerator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">task</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">condition</span><span class="o">:</span><span class="nx">c</span><span class="p">};</span><span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">();</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">removeGenerator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">on</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">q</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">del</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">startGenerators</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">getGeneratorsIDs</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">q</span><span class="p">)};</span></div><div class='line' id='LC62'><span class="k">this</span><span class="p">.</span><span class="nx">getFPS</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mi">1</span><span class="nx">E4</span><span class="o">*</span><span class="p">(</span><span class="nx">p</span><span class="o">/</span><span class="p">((</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()</span><span class="o">-</span><span class="nx">E</span><span class="p">)))</span><span class="o">/</span><span class="mi">10</span><span class="p">);</span><span class="k">return</span> <span class="nx">m</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getTasksCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getQueuedTasksCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">length</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getExecutionTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">x</span><span class="o">-</span><span class="nx">E</span><span class="p">};</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">debugMode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">log</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">debugMode</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">arguments</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">debugMode</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">arguments</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="nx">sigma</span><span class="p">};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="o">=</span><span class="p">{</span><span class="nx">linear</span><span class="o">:</span><span class="p">{},</span><span class="nx">quadratic</span><span class="o">:</span><span class="p">{}};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="p">.</span><span class="nx">linear</span><span class="p">.</span><span class="nx">easenone</span><span class="o">=</span></div><div class='line' id='LC63'><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="p">.</span><span class="nx">quadratic</span><span class="p">.</span><span class="nx">easein</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="p">};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="p">.</span><span class="nx">quadratic</span><span class="p">.</span><span class="nx">easeout</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">2</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">easing</span><span class="p">.</span><span class="nx">quadratic</span><span class="p">.</span><span class="nx">easeinout</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">b</span><span class="o">*=</span><span class="mi">2</span><span class="p">)</span><span class="o">?</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">:-</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="o">--</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">publicPrototype</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">prototype</span><span class="p">})();</span></div></pre></div>
          </td>
        </tr>
      </table>
  </div>

          </div>
        </div>

        <a href="#jump-to-line" rel="facebox" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
        <div id="jump-to-line" style="display:none">
          <h2>Jump to Line</h2>
          <form accept-charset="UTF-8" class="js-jump-to-line-form">
            <input class="textfield js-jump-to-line-field" type="text">
            <div class="full-button">
              <button type="submit" class="button">Go</button>
            </div>
          </form>
        </div>

      </div>
    </div>
</div>

<div id="js-frame-loading-template" class="frame frame-loading large-loading-area" style="display:none;">
  <img class="js-frame-loading-spinner" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-128.gif?1360648843" height="64" width="64">
</div>


        </div>
      </div>
      <div class="context-overlay"></div>
    </div>

      <div id="footer-push"></div><!-- hack for sticky footer -->
    </div><!-- end of wrapper - hack for sticky footer -->

      <!-- footer -->
      <div id="footer">
  <div class="container clearfix">

      <dl class="footer_nav">
        <dt>GitHub</dt>
        <dd><a href="https://github.com/about">About us</a></dd>
        <dd><a href="https://github.com/blog">Blog</a></dd>
        <dd><a href="https://github.com/contact">Contact &amp; support</a></dd>
        <dd><a href="http://enterprise.github.com/">GitHub Enterprise</a></dd>
        <dd><a href="http://status.github.com/">Site status</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Applications</dt>
        <dd><a href="http://mac.github.com/">GitHub for Mac</a></dd>
        <dd><a href="http://windows.github.com/">GitHub for Windows</a></dd>
        <dd><a href="http://eclipse.github.com/">GitHub for Eclipse</a></dd>
        <dd><a href="http://mobile.github.com/">GitHub mobile apps</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Services</dt>
        <dd><a href="http://get.gaug.es/">Gauges: Web analytics</a></dd>
        <dd><a href="http://speakerdeck.com">Speaker Deck: Presentations</a></dd>
        <dd><a href="https://gist.github.com">Gist: Code snippets</a></dd>
        <dd><a href="http://jobs.github.com/">Job board</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Documentation</dt>
        <dd><a href="http://help.github.com/">GitHub Help</a></dd>
        <dd><a href="http://developer.github.com/">Developer API</a></dd>
        <dd><a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a></dd>
        <dd><a href="http://pages.github.com/">GitHub Pages</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>More</dt>
        <dd><a href="http://training.github.com/">Training</a></dd>
        <dd><a href="https://github.com/edu">Students &amp; teachers</a></dd>
        <dd><a href="http://shop.github.com">The Shop</a></dd>
        <dd><a href="/plans">Plans &amp; pricing</a></dd>
        <dd><a href="http://octodex.github.com/">The Octodex</a></dd>
      </dl>

      <hr class="footer-divider">


    <p class="right">&copy; 2013 <span title="0.95628s from fe3.rs.github.com">GitHub</span>, Inc. All rights reserved.</p>
    <a class="left" href="https://github.com/">
      <span class="mega-icon mega-icon-invertocat"></span>
    </a>
    <ul id="legal">
        <li><a href="https://github.com/site/terms">Terms of Service</a></li>
        <li><a href="https://github.com/site/privacy">Privacy</a></li>
        <li><a href="https://github.com/security">Security</a></li>
    </ul>

  </div><!-- /.container -->

</div><!-- /.#footer -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
          <div class="suggester-container">
              <div class="suggester fullscreen-suggester js-navigation-container" id="fullscreen_suggester"
                 data-url="/simonlevasseur/machack/suggestions/commit">
              </div>
          </div>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped leftwards" title="Exit Zen Mode">
      <span class="mega-icon mega-icon-normalscreen"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped leftwards"
      title="Switch themes">
      <span class="mini-icon mini-icon-brightness"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="mini-icon mini-icon-exclamation"></span>
      Something went wrong with that request. Please try again.
      <a href="#" class="mini-icon mini-icon-remove-close ajax-error-dismiss"></a>
    </div>

    
    
    <span id='server_response_time' data-time='0.95700' data-host='fe3'></span>
    
  </body>
</html>

